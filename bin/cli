#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var getRecommendVersions = _interopDefault(require('nodejs-recommended-versions'));
var enquirer = require('enquirer');
var ora = _interopDefault(require('ora'));
var meow = _interopDefault(require('meow'));
var updateNotifier = _interopDefault(require('update-notifier'));
var execa = _interopDefault(require('execa'));

const cli = meow(
  `
  Usage
    $ update-nodes
  `,
  {
    flags: {
      help: {
        alias: 'h',
      },
      version: {
        alias: 'v',
      },
    },
  }
);

function update() {
  updateNotifier({pkg: require('../package.json')}).notify();
}

async function getInstalledVersions() {
  const {stdout} = await execa('nvm', ['list']);

  return stdout.match(/\d+\.\d+\.\d+/g, stdout)
}

function installNode(version) {
  return execa('nvm', ['install', version]).stdout.pipe(process.stdout)
}

async function main(cli) {
  const installed = await getInstalledVersions();
  const recommend = await getRecommendVersions();
  const notInstalled = recommend.filter(version => !installed.includes(version));

  if (notInstalled.length === 0) {
    console.log('All Recommend Node.js Versions are installed.');
    return
  }

  const {selected} = await enquirer.prompt({
    type: 'multiselect',
    name: 'selected',
    message: 'Select Node.js version(s) you want install:',
    choices: notInstalled.map(version => ({
      name: version,
      message: `v${version}`,
      selected: true,
    })),
    initial: notInstalled,
  });

  for (const version of selected) {
    const spinner = ora(`Installing Node.js v${version}`);
    spinner.start();
    await installNode(version);
    spinner.stop();
  }
}

update();
main();
